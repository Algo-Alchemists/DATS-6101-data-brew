# Define your own colors
my_colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=my_colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=my_colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=my_colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=colors, fill=my_colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=colors, title="Number of Channels",ascending=TRUE)
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#273043","#9197AE", "#EFF6EE")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#EFF6EE", "#273043","#9197AE")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=colors, title="Number of Channels")
library(ggplot2)
library(gridExtra)
# Assuming final_male, final_female, final_other, and colors are already defined
# Plot for Male
plot_male <- ggplot(final_male, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Male',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +  scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# Plot for Female
plot_female <- ggplot(final_female, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Female',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# Plot for Others
plot_other <- ggplot(final_other, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Other',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# Combine plots into a single frame
grid.arrange(plot_male, plot_female, plot_other, ncol = 3)
# Filter data for each gender
final_male <- final %>% filter(gender == "M")
final_female <- final %>% filter(gender == "F")
final_other <- final %>% filter(gender == "O")
colors <- c("#34BE82", "#FF7F3F", "#1746A2")
#MALe
ggplot(final_male, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Male',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +  scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#FEMALE
ggplot(final_female, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Female',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#OTHERS
ggplot(final_other, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Other',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
final
#Offers based on difficulty and channels through which they are offered
df_offers
#Offers based on difficulty and channels through which they are offered
# Assuming df_offers is your data frame
library(ggplot2)
# Create a bar plot
ggplot(df_offers, aes(x = difficulty, fill = offer_type)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Difficulty vs Offer Type",
x = "Difficulty",
y = "Count") +
theme_minimal()
# Assuming df_offers is your data frame
library(ggplot2)
# Create a bar plot
ggplot(df_offers, aes(x = difficulty, fill = channels)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Difficulty vs Channels",
x = "Difficulty",
y = "Count") +
theme_minimal()
# Filter data for each gender
final_male <- final %>% filter(gender == "M")
final_female <- final %>% filter(gender == "F")
final_other <- final %>% filter(gender == "O")
colors <- c("#34BE82", "#FF7F3F", "#1746A2")
#MALe
ggplot(final_male, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Male',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +  scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#FEMALE
ggplot(final_female, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Female',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#OTHERS
ggplot(final_other, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Other',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
ggplot(final, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer Acceptance by Age Group',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = channels)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = offer_types)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = offer_type)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = channels)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
library(ggplot2)
# Assuming df_offers is your data frame
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = channels)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
facet_wrap(~offer_type, scales = 'free', ncol = 1) +  # Facet by offer_type
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = channels)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#EFF6EE", "#273043","#9197AE")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=channels_count, fill=colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#EFF6EE", "#273043","#9197AE")
# Create a pie chart with custom colors
pie(table(channels_count), main='Distribution of Number of Channels per Offer', col=colors, labels=table(channels_count))
# Add a legend
legend("topright", legend=unique(channels_count), fill=colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#EFF6EE", "#273043", "#9197AE")
# Count the occurrences of each number of channels
channels_table <- table(channels_count)
# Create a pie chart with custom colors and labels
pie(channels_table, main='Distribution of Number of Channels per Offer', col=colors, labels=channels_table)
# Add a legend with custom labels
legend("topright", legend=c("2 Channels", "3 Channels", "4 Channels"), fill=colors, title="Number of Channels")
#Distribution of Number of Channels per Offer
# Assuming channels_count and table(channels_count) are already defined
# Assuming channels_count and table(channels_count) are already defined
# Define your own colors
colors <- c("#EFF6EE", "#273043", "#9197AE")
# Count the occurrences of each number of channels
channels_table <- table(channels_count)
# Create a pie chart with custom colors and labels
pie(channels_table, main='Distribution of Number of Channels per Offer', col=colors, labels=channels_table)
# Add a legend with custom labels
legend("topright", legend=c("2", "3", "4"), fill=colors, title="Number of Channels")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = offer_type)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
#Offers based on difficulty and channels through which they are offered
custom_colors <- c("#BF8B67", "#632626", "#9D5353", "#D0B8A8")
ggplot(df_offers, aes(x = as.factor(difficulty), fill = channels)) +
geom_bar(position = 'stack', color = 'black', size = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(y = 'Number of Offers', x = 'Difficulty of Offers',
title = 'Offers based on difficulty and channels through which they are offered') +
theme_minimal() +
theme(legend.position = "bottom")
contingency_table <- table(final$gender, final$age_group)
# Perform the chi-squared test
chi_squared_result <- chisq.test(contingency_table)
# View the result
print(chi_squared_result)
contingency_table <- table(final$gender, final$age_group)
contingency_table
# Perform the chi-squared test
chi_squared_result <- chisq.test(contingency_table)
# View the result
print(chi_squared_result)
# df_offers and df_cust_offers
merged_df <- merge(df_cust_offer, customers, by.x = "customer_id", by.y = "id")
head(merged_df)
#customers and merged_df
final <- merge(merged_df,df_offers , by.x = "value_data", by.y = "id")
head(final)
# df_offers and df_cust_offers
merged_df <- merge(df_cust_offer, customers, by.x = "customer_id", by.y = "id")
head(merged_df)
#customers and merged_df
final <- merge(merged_df,df_offers , by.x = "value_data", by.y = "id")
final
# Subset the data for 'offer viewed' events
offer_viewed <- event_offer[event_offer$event == "offer viewed", ]
# Count the number of times each offer was viewed
p1 <- table(offer_viewed$offer_alias)
# Calculate the view rate for each offer
p1_rate <- p1 / p0
# Sort the view rates in descending order
p1_rate <- p1_rate[order(p1_rate, decreasing = TRUE)]
# Create a bar plot
barplot(p1_rate, col = c('#011f4b', '#011f4b', '#011f4b', '#011f4b', '#03396c', '#03396c', '#005b96', '#005b96', '#005b96', '#b3cde0'),
names.arg = names(p1_rate),
main = 'View Rate Percentage',
xlab = 'Offers',
ylab = 'Percentage',
ylim = c(0, 1.2),
yaxt = 'n')
axis(2, at = seq(0, 1.2, 0.2), labels = paste0(seq(0, 1.2, 0.2) * 100, '%'))
# Show the plot
# Number of offers
num_offers <- nrow(df_offers)
# Create an empty data frame to store the counts
each_offer_received <- data.frame(matrix(ncol = num_offers))
colnames(each_offer_received) <- LETTERS[1:num_offers]
# Loop through the offers and count how many times each offer was received on each day
for (i in 1:num_offers) {
offer_alias <- LETTERS[i]
offer_received_counts <- table(df_event[df_event$offer_alias == offer_alias, "days_since_start"])
each_offer_received[, i] <- offer_received_counts
}
# Set row names explicitly
row_names <- paste0('Day', unique(df_event$days_since_start))
rownames(each_offer_received) <- row_names
#checking numerical cols of final df
numerical_cols <- sapply(final, is.numeric)
numerical_colnames <- names(final)[numerical_cols]
categorical_colnames <- names(final)[!numerical_cols]
max_length <- max(length(numerical_colnames), length(categorical_colnames))
numerical_colnames <- c(numerical_colnames, rep(NA, max_length - length(numerical_colnames)))
categorical_colnames <- c(categorical_colnames, rep(NA, max_length - length(categorical_colnames)))
var_df <- data.frame(Numeric = numerical_colnames, Categorical = categorical_colnames)
print(var_df)
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
# Count the frequency of each offer type
offer_counts <- table(final$offer_type)
ggplot(data = as.data.frame(offer_counts), aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = colors, color = "black") +
labs(title = "Frequency of Each Offer Type",
x = "Offer Type",
y = "Count") +
scale_fill_manual(values = colors)
# Summarize the data to get counts
counts <- final %>%
group_by(offer_type, event) %>%
summarize(count = n())
colors <- c("#34BE82", "#FF7F3F", "#1746A2")
# Create a stacked bar plot
ggplot(counts, aes(x = offer_type, y = count, fill = event)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Event Counts for Each Offer Type",
x = "Offer Type",
y = "Count") +
scale_fill_manual(values = colors)
# Offer Preferences by Age Group
age_offer_counts <- final %>%
group_by(age_group, offer_type) %>%
summarize(count = n())
colors <- c("#ad6a6c", "#d0ada7", "#e8d6cb")
ggplot(age_offer_counts, aes(x = age_group, y = count, fill = offer_type)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Offer Type Preferences by Age Group',
x = 'Age Group',
y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1)) +
scale_fill_manual(values = colors)
#Offer Type Preferences by Gender
offer_counts <- table(final$gender, final$offer_type)
offer_counts_df <- as.data.frame(offer_counts)
colnames(offer_counts_df) <- c('gender', 'offer_type', 'count')
# Plot using ggplot2
ggplot(offer_counts_df, aes(x = gender, y = count, fill = offer_type)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Offer Type Preferences by Gender',
x = 'Gender',
y = 'Count') +
theme_minimal() +scale_fill_manual(values = colors)
# Filter data for each gender
final_male <- final %>% filter(gender == "M")
final_female <- final %>% filter(gender == "F")
final_other <- final %>% filter(gender == "O")
colors <- c("#34BE82", "#FF7F3F", "#1746A2")
#MALe
ggplot(final_male, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Male',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +  scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#FEMALE
ggplot(final_female, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Female',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
#OTHERS
ggplot(final_other, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer event type by Age Group - Other',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +scale_fill_manual(values = colors)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
contingency_table <- table(final$gender, final$age_group)
contingency_table
# Perform the chi-squared test
chi_squared_result <- chisq.test(contingency_table)
# View the result
print(chi_squared_result)
ggplot(final, aes(x = age_group, fill = event)) +
geom_bar(position = 'dodge') +
labs(title = 'Offer Acceptance by Age Group',
x = 'Age Group',
y = 'Count',
fill = 'Event Type') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
# Importing and reading the Datasets
df_cust_offer<-read.csv("data/transcript.csv")
# df_cust_offer <- df_cust_offer[, -1]
head(df_cust_offer)
print("The structure of Transcript:")
str(df_cust_offer)
df_offers<-read.csv("data/portfolio.csv")
df_offers<- df_offers[, -1]
head(df_offers)
print("The structure of Portfolio:")
str(df_offers)
df_cust<-read.csv("data/profile.csv")
df_cust<- df_cust[, -1]
head(df_cust)
print("The structure of Profile:")
str(df_cust)
#Checking for the Missing values in each column of the dataframes
cust_offer_missing_values <- colSums(is.na(df_cust_offer))
print("Missing values in transcript:")
print(cust_offer_missing_values)
offers_missing_values <- colSums(is.na(df_offers))
print("Missing values in portfolio:")
print(offers_missing_values)
df_cust$gender[df_cust$gender == ""] <- NA #Filling empty spaces with NA values
cust_missing_values <- colSums(is.na(df_cust))
print("Missing values in profile:")
print(cust_missing_values)
missing_gender <- df_cust[is.na(df_cust$gender), ]
missing_income <- df_cust[is.na(df_cust$income), ]
sum(missing_gender$id == missing_income$id)
#Checking count of missing values if they are from the same observations
missing_gender_and_income <- sum(is.na(df_cust$gender) & is.na(df_cust$income))
print("Count of missing values in both gender and income:")
print(missing_gender_and_income)
# Identify 'id' values to remove
id_to_remove <- missing_income$id
# Create a new dataframe without the rows where 'id' is in 'id_to_remove'
df_customer_no_na <- df_cust[!df_cust$id %in% id_to_remove, ]
# Reset the row indices
rownames(df_customer_no_na) <- NULL
# Display information about the resulting dataframe
str(df_customer_no_na)
#There are no NA values in df_customer_no_na
sum(is.na(df_customer_no_na))
missing_gender_and_income_together <- df_cust[is.na(df_cust$gender) & is.na(df_cust$income), ]
head(missing_gender_and_income_together)
#Checking the columns with numerical data
cust_numcols <- names(df_customer_no_na)[sapply(df_customer_no_na, is.numeric)]
head(cust_numcols)
#Converting became_member_on to datetime format
df_customer_no_na$became_member_on <- as.Date(as.character(df_customer_no_na$became_member_on), format = "%Y%m%d")
head(df_customer_no_na)
# Save checkpoint after data cleaning
customers <- data.frame(df_customer_no_na)
```{r}
